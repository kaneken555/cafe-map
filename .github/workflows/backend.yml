# .github/workflows/backend.yml

name: Backend Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'docker/**'
      - '.github/workflows/backend.yml'
      - '.github/workflows/notify.yml'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      # 🔹 1. backendリポジトリのチェックアウト
      - name: Checkout backend repo
        uses: actions/checkout@v3

      # 🔹 2. terraformリポジトリのチェックアウト
      - name: Checkout terraform repo
        uses: actions/checkout@v3
        with:
          repository: kaneken555/terraform
          path: terraform
          token: ${{ secrets.TF_REPO_PAT }}  # Privateの場合はトークン必須

      # 🔹 3. GitHub Actions のグローバルIP取得
      - name: Get GitHub Actions IP
        id: myip
        run: echo "IP=$(curl -s https://checkip.amazonaws.com)" >> $GITHUB_ENV      

      # 🔹 4. AWS認証
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      # 🔹 5. Terraformで踏み台EC2作成前に .tfvars を生成
      - name: Generate terraform.tfvars for bastion-temp
        run: |
          cat <<EOF > terraform/envs/bastion-temp/terraform.tfvars
          project_name       = "mappin"
          vpc_id             = "${{ secrets.VPC_ID }}"
          public_subnet_id   = "${{ secrets.PUBLIC_SUBNET_ID }}"
          instance_ami       = "${{ secrets.BASTION_AMI }}"
          instance_type      = "t3.micro"
          key_name           = "${{ secrets.KEY_PAIR_NAME }}"
          my_ip_cidr         = "${{ env.IP }}/32"

          common_tags = {
            Owner     = "GitHubActions"
            environment = "temp"
            ManagedBy = "Terraform"
          }
          EOF

      # 🔹 6. Terraformで踏み台EC2作成（bastion moduleのみ apply）
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.2

      # 🔹 7. Bastion作成（envs/bastion-temp）
      - name: Terraform Apply Bastion
        run: |
          cd terraform/envs/bastion-temp
          terraform init
          terraform apply -auto-approve

      - name: Debug terraform output
        run: |
          cd terraform/envs/bastion-temp
          terraform output

      # 🔹 8. BastionのPublic IPとSG IDを取得
      - name: Get Bastion IP and SG ID  
        id: bastion_info
        run: |
          cd terraform/envs/bastion-temp

          BASTION_IP=$(terraform output -raw bastion_ip | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
          BASTION_SG_ID=$(terraform output -raw bastion_sg_id | grep -oE '^sg-[a-zA-Z0-9]+')

          echo "BASTION_IP=$BASTION_IP" >> $GITHUB_ENV
          echo "BASTION_SG_ID=$BASTION_SG_ID" >> $GITHUB_ENV

      - name: Debug bastion output values
        run: |
          echo "Bastion IP: ${{ steps.bastion_info.outputs.bastion_ip }}"
          echo "Bastion SG ID: ${{ steps.bastion_info.outputs.bastion_sg_id }}"
        
    
      # 🔹 9. プライベートEC2のSGにBastion SGを許可
      - name: Authorize Bastion SG in Private EC2 SG
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.PRIVATE_EC2_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --source-group ${{ steps.bastion_info.outputs.bastion_sg_id }} \
            --region ap-northeast-1          

      # 🔹 10. backend/nginxイメージのビルド
      - name: Build backend image
        run: |
          docker build -t myapp-backend -f backend/Dockerfile backend

      - name: Build nginx image
        run: |
          docker build -t myapp-nginx -f nginx/Dockerfile nginx

      # 🔹 11. イメージを保存
      - name: Save images as tar files
        run: |
          docker save myapp-backend > backend.tar
          docker save myapp-nginx > nginx.tar
          
      # 🔹 12. zipにまとめる
      - name: Prepare deploy.zip
        run: |
          mkdir deploy_files
          mv backend.tar nginx.tar deploy_files/
          cp docker-compose.prod.yml deploy_files/
          zip -r deploy.zip deploy_files


      # 🔹 13. SSH秘密鍵保存
      - name: Save SSH private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
  
      # 🔹 14. known_hosts登録
      - name: Add known_hosts entries
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ steps.bastion_info.outputs.bastion_ip }} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no \
              -i private_key.pem \
              ${{ secrets.BASTION_USER }}@${{ steps.bastion_info.outputs.bastion_ip }} \
              "ssh-keyscan -H ${{ secrets.TARGET_PRIVATE_IP }}" >> ~/.ssh/known_hosts
          
      # 🔹 15. SCP転送
      - name: Upload via SCP through Bastion
        run: |
          scp -o "ProxyCommand=ssh -i private_key.pem -W %h:%p ${{ secrets.BASTION_USER }}@${{ steps.bastion_info.outputs.bastion_ip }}" \
              -i private_key.pem deploy.zip \
              ec2-user@${{ secrets.TARGET_PRIVATE_IP }}:/home/ec2-user/
    
      # 🔹 16. SSHして展開・再起動
      - name: SSH and Deploy
        run: |
          ssh -o "ProxyCommand=ssh -i private_key.pem -W %h:%p ${{ secrets.BASTION_USER }}@${{ steps.bastion_info.outputs.bastion_ip }}" \
              -i private_key.pem ec2-user@${{ secrets.TARGET_PRIVATE_IP }} << 'EOF'
            set -e
            cd /home/ec2-user
            rm -rf deploy_files
            unzip -o deploy.zip
      
            docker load < deploy_files/backend.tar
            docker load < deploy_files/nginx.tar
      
            docker-compose -f deploy_files/docker-compose.prod.yml down
            docker-compose -f deploy_files/docker-compose.prod.yml up -d
          EOF

      # 🔹 17. Bastion SGの許可を削除
      - name: Revoke Bastion SG from Private EC2 SG
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.PRIVATE_EC2_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --source-group ${{ steps.bastion_info.outputs.bastion_sg_id }} \
            --region ap-northeast-1

      # 🔹 18. Bastion EC2破棄（envs/bastion-temp）
      - name: Destroy Bastion EC2
        if: always()
        run: |
          cd terraform/envs/bastion-temp
          terraform destroy -auto-approve
