# .github/workflows/backend.yml

name: Backend Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'docker/**'
      - '.github/workflows/backend.yml'

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1


      - name: Build backend image
        run: |
          docker build -t myapp-backend -f backend/Dockerfile backend

      - name: Build nginx image
        run: |
          docker build -t myapp-nginx -f nginx/Dockerfile nginx

      - name: Save images as tar files
        run: |
          docker save myapp-backend > backend.tar
          docker save myapp-nginx > nginx.tar
          

      - name: Prepare deploy.zip
        run: |
          mkdir deploy_files
          mv backend.tar nginx.tar deploy_files/
          cp docker-compose.prod.yml deploy_files/
          zip -r deploy.zip deploy_files

      - name: Save SSH private key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
  

      # 🔹 GitHub Actions のグローバルIPを取得
      - name: Get GitHub Actions IP
        id: myip
        run: echo "IP=$(curl -s https://checkip.amazonaws.com)" >> $GITHUB_ENV        

      # 🔹 IPをセキュリティグループに一時許可
      - name: Allow SSH from GitHub Actions
        run: |
          echo "📡 許可するIP: ${{ env.IP }}"
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.BASTION_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ env.IP }}/32 \
            --region ap-northeast-1

      - name: Add known_hosts entries
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no \
              -i private_key.pem \
              ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} \
              "ssh-keyscan -H ${{ secrets.TARGET_PRIVATE_IP }}" >> ~/.ssh/known_hosts
          
          
      # 🔹 成果物の転送（SCP経由）
      - name: Upload via SCP through Bastion
        run: |
          scp -o "ProxyCommand=ssh -i private_key.pem -W %h:%p ec2-user@${{ secrets.BASTION_HOST }}" \
              -i private_key.pem deploy.zip \
              ec2-user@${{ secrets.TARGET_PRIVATE_IP }}:/home/ec2-user/
    

      # 🔹 SSHして展開・再起動
      - name: SSH and Deploy
        run: |
          ssh -o "ProxyCommand=ssh -i private_key.pem -W %h:%p ec2-user@${{ secrets.BASTION_HOST }}" \
              -i private_key.pem ec2-user@${{ secrets.TARGET_PRIVATE_IP }} << 'EOF'
            set -e
            cd /home/ec2-user
            rm -rf deploy_files
            unzip -o deploy.zip
      
            docker load < deploy_files/backend.tar
            docker load < deploy_files/nginx.tar
      
            docker-compose -f deploy_files/docker-compose.prod.yml down
            docker-compose -f deploy_files/docker-compose.prod.yml up -d
          EOF

      # 🔹 セキュリティグループからIPを削除（常に実行）
      - name: Revoke SSH access
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.BASTION_SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ env.IP }}/32 \
            --region ap-northeast-1