// components/Header.tsx
import React, { useState } from "react";
import clsx from "clsx";
import SideMenu from "./SideMenu/SideMenu";
import HeaderButton from "./HeaderButton/HeaderButton";
import UserMenu from "./UserMenu";
import GroupListModal from "./GroupListModal";
import { Coffee, Map as MapIcon, List as ListIcon, Layers, Menu } from "lucide-react";
// import { MapItem, SharedMapItem } from "../types/map";
import { APP_TITLE } from "../constants/app"; // „Ç¢„Éó„É™„Çø„Ç§„Éà„É´„Çí„Ç§„É≥„Éù„Éº„Éà
import { ICON_SIZES } from "../constants/ui";

// Contexts
import { useAuth } from "../contexts/AuthContext";
import { useMap } from "../contexts/MapContext";
import { useGroup } from "../contexts/GroupContext";

import { useHeaderActions } from "../hooks/useHeaderActions"; // ‚úÖ „Éò„ÉÉ„ÉÄ„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥„Éï„ÉÉ„ÇØ„Çí„Ç§„É≥„Éù„Éº„Éà

import ReactGA from "react-ga4";


interface HeaderProps {
  closeCafeListPanel: () => void;
  isMyCafeListOpen: boolean;
  setShareUuid: React.Dispatch<React.SetStateAction<string | null>>; // ‚úÖ „Ç∑„Çß„Ç¢„Éû„ÉÉ„Éó„ÅÆUUID„Çí„Çª„ÉÉ„Éà„Åô„ÇãÈñ¢Êï∞
  onOpenCafeList: () => void; // ‚úÖ „Ç´„Éï„Çß‰∏ÄË¶ß„Éë„Éç„É´„ÇíÈñã„ÅèÈñ¢Êï∞
  onShowMyCafeMap: () => void; // ‚úÖ ËøΩÂä†
  onOpenMapList: () => void; // ‚úÖ ËøΩÂä†
}

const Header: React.FC<HeaderProps> = ({
  closeCafeListPanel,
  isMyCafeListOpen,
  setShareUuid, // ‚úÖ „Ç∑„Çß„Ç¢„Éû„ÉÉ„Éó„ÅÆUUID„Çí„Çª„ÉÉ„Éà„Åô„ÇãÈñ¢Êï∞
  onOpenCafeList, // ‚úÖ „Ç´„Éï„Çß‰∏ÄË¶ß„Éë„Éç„É´„ÇíÈñã„ÅèÈñ¢Êï∞
  onShowMyCafeMap, // ‚úÖ ËøΩÂä†
  onOpenMapList,
}) => {    
  const { user } = useAuth();
  const { selectedMap, mapMode } = useMap(); // „Éû„ÉÉ„Éó„É™„Çπ„Éà„Å®„Çª„ÉÉ„ÉàÈñ¢Êï∞„Çí„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Åã„ÇâÂèñÂæó
  const { setSelectedGroup, setSelectedGroupId } = useGroup(); // „Ç∞„É´„Éº„Éó„É™„Çπ„Éà„ÅÆ„Çª„ÉÉ„ÉàÈñ¢Êï∞„Çí„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Åã„ÇâÂèñÂæó

  const [isSideMenuOpen, setIsSideMenuOpen] = useState(false);
  // const [isMapListOpen, setIsMapListOpen] = useState(false);
  const [isLoginMenuOpen, setIsLoginMenuOpen] = useState(false);
  const [isGroupListOpen, setIsGroupListOpen] = useState(false); // üëà „Ç∞„É´„Éº„Éó‰∏ÄË¶ß„É¢„Éº„ÉÄ„É´

  const {
    guestLoginHandler,
    logoutHandler,
    // mapSelectHandler,
    // sharedMapSelectHandler,
  } = useHeaderActions({ closeCafeListPanel, setShareUuid });
  

  const handleGuestLogin = async () => {
    await guestLoginHandler(); // ‚úÖ „Éò„ÉÉ„ÉÄ„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥„Éï„ÉÉ„ÇØ„ÅÆ„Ç≤„Çπ„Éà„É≠„Ç∞„Ç§„É≥„Éè„É≥„Éâ„É©„ÇíÂëº„Å≥Âá∫„Åô
    setIsLoginMenuOpen(false);

    ReactGA.gtag("event", "login", {
      method: "guest",
    });
    
  }

  const handleLogout = async () => {
    await logoutHandler(); // ‚úÖ „Éò„ÉÉ„ÉÄ„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥„Éï„ÉÉ„ÇØ„ÅÆ„É≠„Ç∞„Ç¢„Ç¶„Éà„Éè„É≥„Éâ„É©„ÇíÂëº„Å≥Âá∫„Åô
    setIsLoginMenuOpen(false);  // „É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã
  }

  const handleOpenGroupList = () => {
    setIsGroupListOpen(true);
    setIsLoginMenuOpen(false);
  };
  
  return (
    <>
      <SideMenu 
        isOpen={isSideMenuOpen} 
        onClose={() => setIsSideMenuOpen(false)} 
      />
        
      {/* <header className="w-full h-12 md:h-16 px-2 md:px-4 flex justify-between items-center bg-gradient-to-r from-yellow-300 to-yellow-500 shadow-md"> */}
      <header
        className={clsx(
          "w-full flex justify-between items-center shadow-md",
          "h-12 md:h-16 px-2 md:px-4",
          "bg-gradient-to-r from-yellow-300 to-yellow-500"
        )}
      >

        {/* Â∑¶Ôºö„Çµ„Ç§„Éâ„É°„Éã„É•„Éº */}
        <div className="flex items-center">
          <button onClick={() => setIsSideMenuOpen(true)} className="text-2xl cursor-pointer">
            <Menu size={ICON_SIZES.MEDIUM} />
          </button>
        </div>

        {/* ‰∏≠Â§ÆÔºö„Çø„Ç§„Éà„É´ */}
        <div className="flex-grow flex justify-center items-center space-x-2">
          <Coffee size={ICON_SIZES.MEDIUM} />
          <h1 className="text-lg md:text-2xl font-bold text-black">{APP_TITLE}</h1>
        </div>

        {/* Âè≥ÔºöÊìç‰Ωú„Éú„Çø„É≥Áæ§ */}
        <div className="flex items-center space-x-2">
          {/* <div className="flex items-center space-x-2">        */}
          <div className="hidden md:flex items-center space-x-2">             
            <HeaderButton
              onClick={onOpenCafeList}
              disabled={!user}
              icon={<ListIcon size={ICON_SIZES.MEDIUM} />}
              label="My Caf√© List"
              active={isMyCafeListOpen}
            />

            <HeaderButton
              onClick={onShowMyCafeMap}
              disabled={!user}
              icon={<MapIcon size={ICON_SIZES.MEDIUM} />}
              label="My Caf√© Map"
              active={mapMode === "mycafe"} // ‚úÖ ÁèæÂú®„ÅÆ„É¢„Éº„Éâ„Å´„Çà„Å£„Å¶Âº∑Ë™ø
            />

            <HeaderButton
              onClick={onOpenMapList}
              disabled={!user}
              icon={<Layers size={ICON_SIZES.MEDIUM} />}
              label={selectedMap?.name || "My Map List"}
              active={!!selectedMap} // ‚úÖ ÁèæÂú®„ÅÆ„Éû„ÉÉ„Éó„Å´„Çà„Å£„Å¶Âº∑Ë™ø
            />
          </div>

          {/* „É¶„Éº„Ç∂„Éº„É°„Éã„É•„Éº */}
          <UserMenu
            isOpen={isLoginMenuOpen}
            onToggle={() => setIsLoginMenuOpen((prev) => !prev)}
            onGuestLogin={handleGuestLogin}
            onLogout={handleLogout}
            onOpenGroupList={handleOpenGroupList} // „Ç∞„É´„Éº„Éó‰∏ÄË¶ß„ÇíÈñã„Åè„Éè„É≥„Éâ„É©
          />
        </div>

          <GroupListModal
            isOpen={isGroupListOpen}
            onClose={() => setIsGroupListOpen(false)}
            onSelectGroup={(group) => {
              setSelectedGroup(group);
              setSelectedGroupId(group?.id ?? null);
              setIsGroupListOpen(false);
            }}
          />
      </header>
    </>
  );
}

export default Header;